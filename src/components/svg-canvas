import React from 'react';
import Station from './station/station';
import SimpleLine from './line/simple-line';
import DiagonalLine from './line/diagonal-line';

const SvgCanvas = () => {
    const [nodes, setNodes] = React.useState({
        stn1: { x: 250, y: 150 },
        stn2: { x: 250, y: 250 },
        stn3: { x: 250, y: 350 },
        stn4: { x: 150, y: 250 },
        stn5: { x: 350, y: 250 },
    } as { [stn: string]: any });
    const [edges, setEdges] = React.useState({
        line1_1: { from: 'stn1', to: 'stn2', color: 'red' },
        line1_2: { from: 'stn2', to: 'stn3', color: 'red' },
        line2_1: { from: 'stn4', to: 'stn2', color: 'green' },
        line2_2: { from: 'stn2', to: 'stn5', color: 'green' },
    } as { [line: string]: { from: string; to: string; color: string } });
    const [offset, setOffset] = React.useState({ x: 0, y: 0 });
    const [active, setActive] = React.useState(undefined as undefined | string);

    // React.useEffect(() => {
    //     setNodes(
    //         Object.fromEntries(
    //             [...Array(100).keys()]
    //                 .map(i => [...Array(100).keys()].map(j => [i, j]))
    //                 .flat()
    //                 .map(([i, j]) => [`stn${i}_${j}`, { x: i * 25, y: j * 25 }])
    //         )
    //     );
    //     setEdges(
    //         Object.fromEntries([
    //             ...[...Array(100).keys()]
    //                 .map(i => [...Array(99).keys()].map(j => [i, j]))
    //                 .flat()
    //                 .map(([i, j]) => [
    //                     `line${i}_${j}_v`,
    //                     { from: `stn${i}_${j}`, to: `stn${i}_${j + 1}`, color: 'black' },
    //                 ]),
    //             ...[...Array(99).keys()]
    //                 .map(i => [...Array(100).keys()].map(j => [i, j]))
    //                 .flat()
    //                 .map(([i, j]) => [
    //                     `line${i}_${j}_h`,
    //                     { from: `stn${i}_${j}`, to: `stn${i + 1}_${j}`, color: 'black' },
    //                 ]),
    //         ])
    //     );
    // }, []);

    const handlePointerDown = (node: string, e: React.PointerEvent<SVGElement>) => {
        const el = e.currentTarget;
        const bbox = e.currentTarget.getBoundingClientRect();
        const x = e.clientX - bbox.left;
        const y = e.clientY - bbox.top;
        el.setPointerCapture(e.pointerId);

        setOffset({ x, y });
        setActive(node);
    };
    const handlePointerMove = (node: string, e: React.PointerEvent<SVGElement>) => {
        const bbox = e.currentTarget.getBoundingClientRect();
        const x = e.clientX - bbox.left;
        const y = e.clientY - bbox.top;

        if (node === active) {
            const n = nodes[node];
            n.x = n.x - (offset.x - x);
            n.y = n.y - (offset.y - y);
            setNodes({ ...nodes, [node]: n });
            // console.log('move ', nodes[node]);
        }
    };
    const handlePointerUp = (node: string, e: React.PointerEvent<SVGElement>) => {
        setActive(undefined);
    };

    return (
        <svg xmlns="http://www.w3.org/2000/svg" width={1920} height={1080}>
            {Object.entries(edges).map(([edge, attr]) => (
                <DiagonalLine
                    key={edge}
                    x1={nodes[attr.from].x}
                    y1={nodes[attr.from].y}
                    x2={nodes[attr.to].x}
                    y2={nodes[attr.to].y}
                    color={attr.color}
                    startFrom="from"
                />
            ))}
            {Object.entries(nodes).map(([node, attr]) => (
                <Station
                    id={node}
                    key={node}
                    x={attr.x}
                    y={attr.y}
                    name={['车站', node]}
                    handlePointerDown={handlePointerDown}
                    handlePointerMove={handlePointerMove}
                    handlePointerUp={handlePointerUp}
                />
            ))}
        </svg>
    );
};

export default SvgCanvas;
